#include <iostream>
#include <random>
#include <algorithm>
#include <thread>
#include <mutex>
#include <chrono>
#include <fstream>
#define MIN(a,b) ((a) < (b) ? a : b)

//using namespace std;
using arr_type = double;
#define _DEBUG

#ifdef _DEBUG
std::mutex mutex;
#endif

const auto nelem = 10;
const auto maxrand = 100;
const auto nruns = 1;

static auto rand_gen()
{
    static std::random_device rnd_dev;
    static std::mt19937 mersenne_engine{rnd_dev()};
    static std::uniform_int_distribution<int> dist{1, maxrand};
    return dist(mersenne_engine);
}

/// i could not use this!
//static void genrandarr(arr_type arr[])
//{
//    auto bgn = std::begin(astd::ref(arr));
//    std::generate(begin(arr), end(arr), rand_gen);
//}
class thread_raii
{
public:
    thread_raii(std::thread&& _t): t{std::move(_t)} { }
    thread_raii(thread_raii &&thr_raii): t{std::move(thr_raii.t)} { }

    ~thread_raii()
    {
        if (t.joinable())
        {
            t.join();
        }
    }

    std::thread& get()
    {
        return t;
    }

private:
    std::thread t;
};
#ifdef _DEBUG
static void printarr(arr_type arr[])
{
    std::cout <<"------------------"<< std::endl;
    for (auto elem = 0 ; elem<nelem; elem++)
        std::cout << arr[elem] << " ";
    std::cout<< std::endl <<"------------------"<< std::endl;
    ///why i can't use range based loop here!?
    //    for (auto elem: arr)
    //    {
    //        std::cout << " -> "<< elem;
    //    }
    //    std::cout << std::endl;
}
#endif

void InsertionSort(arr_type a[], int n, int p){
    int j, k, temp;
    for(j = 1; j < n; j++){
        for(k = j-1; k >= 0; k--){
            // If value at higher index is greater, then break the loop.
            if(a[(k+1)*p] >= a[k*p])
                break;
            // Switch the values otherwise.
            else{
                temp = a[k*p];
                a[k*p] = a[(k+1)*p];
                a[(k+1)*p] = temp;
            }
        }
    }
}
void shell_sort_test(arr_type a[]){
	int i, j, k, temp;
	// Gap 'i' between index of the element to be compared, initially n/2.
	for(i = (int)(nelem/2); i > 0; i = (int)(i/2)){
		for(j = i; j < nelem; j++){
			for(k = j-i; k >= 0; k = k-i){
				// If value at higher index is greater, then break the loop.
				if(a[k+i] >= a[k])
                    break;
				// Switch the values otherwise.
				else{
					temp = a[k];
					a[k] = a[k+i];
					a[k+i] = temp;
				}
			}
		}
	}
}
static void shell_sort(int thr_id,int pitch,int max_threads, arr_type arr[])
{
    auto length =nelem-thr_id+pitch-1;
    auto l = (int)(length/pitch);
    InsertionSort(arr,l,pitch);

    auto p = pitch - max_threads;
    auto k = 1;
    while(p > max_threads)
    {
        InsertionSort(&(arr[max_threads*k]),(int)((length - max_threads * k)/pitch),pitch);
        p -= max_threads;
             k++;
    }
}
void parallel_shellsort(arr_type arr[],auto max_threads)
{
  //  std::vector<std::thread> threads;
  std::thread threads[max_threads];
    for(auto pitch = (unsigned int)(nelem/2); pitch > 1; pitch = pitch/2)
    {
        auto t_num = MIN(pitch,max_threads);
        for (auto thr_id = 0u ; thr_id < t_num ; thr_id++ )
        {
//            threads.emplace_back(thread_raii{
//                   std::thread{shell_sort, thr_id, pitch, max_threads, arr}});
    threads[thr_id]=
                   std::thread{shell_sort, thr_id, pitch, max_threads, arr};
        }
//         for (auto &thr: threads)
//         thr.join();
         // joining all threads
        for (auto t = 0u; t < t_num; t++)
            threads[t].join();
    }
}
int main()
{
    // const auto nelem=8000;
    //auto i=0;
    // std::cout<<"\nEnter the number of elements to be sorted: "<<std::endl;
    // std::cin>>nelem;
    arr_type arr[nelem];
//    std::generate(std::begin(arr), std::end(arr), rand_gen);
//#ifdef _DEBUG
//    printarr(arr);
//#endif
    const auto max_threads = std::thread::hardware_concurrency();

    auto get_time = std::chrono::steady_clock::now;
    decltype(get_time()) start, end;

    /// Serial
    start = get_time();
    for (auto i = 0; i < nruns; i++) {
        std::generate(std::begin(arr), std::end(arr), rand_gen);
        shell_sort_test(arr);
    }
    end = get_time();

    auto elapsed = std::chrono::duration_cast
                   <std::chrono::milliseconds>(end - start).count();
    auto ser_time = double(elapsed) / nruns;

    std::cout << "Serial time: " << ser_time << "ms" << std::endl;

    /// Parallel
    std::cout << "Paralel time: " << std::endl;
    //    std::ofstream speedupfile{"speedup"};
    //    if (!speedupfile.is_open()) {
    //        std::cerr << "can't open file" << std::endl;
    //        return 1;
    //    }

    for (auto nthr = 2u; nthr <= max_threads; nthr++)
    {
        start = get_time();

        for (auto i = 0; i < nruns; i++)
        {
            std::generate(std::begin(arr), std::end(arr), rand_gen);
#ifdef _DEBUG
    printarr(arr);
#endif
            parallel_shellsort(arr, 4u);
#ifdef _DEBUG
    printarr(arr);
#endif
        }

        end = get_time();

        elapsed = std::chrono::duration_cast
                  <std::chrono::milliseconds>(end - start).count();
        auto par_time = double(elapsed) / nruns;

        std::cout << "Using " << nthr << " threads: "  << "elapsed time "
                  << par_time << "ms _ speedup " << ser_time / par_time << std::endl;
        // speedupfile << nthr << "\t" << ser_time / par_time << std::endl;
    }

    //speedupfile.close();

//#ifdef _DEBUG
//    printarr(arr);
//#endif
    return 0;
}
